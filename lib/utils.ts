import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function getInitials(name: string): string {
  if (!name) return "";

  return name
    .split(" ")
    .map((part) => part.charAt(0))
    .join("")
    .toUpperCase()
    .slice(0, 2);
}

/**
 * Generate URL for model items in the dashboard
 * @param modelKey - The model key identifier
 * @param id - The item ID or "create" for new item form
 * @returns The relative URL path
 */
export function getModelUrl(modelKey: string, id: string | number): string {
  if (id === "create") {
    return `/dashboard/models/${modelKey}/create`;
  }
  return `/dashboard/models/${modelKey}/${id}`;
}

/**
 * Format date string into a localized date representation
 * @param date - Date string or Date object
 * @param options - Date formatting options
 * @returns Formatted date string
 */
export function formatDate(
  date: string | Date | null | undefined,
  options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  }
): string {
  if (!date) return "-";

  try {
    const dateObj = typeof date === "string" ? new Date(date) : date;
    return dateObj.toLocaleDateString(undefined, options);
  } catch (error) {
    console.error("Error formatting date:", error);
    return String(date);
  }
}

/**
 * Extracts localized name and description from an item.
 * Falls back to default fields if localized versions are not available.
 * @param item - The object containing fields like name, name_en, description, description_fr, etc.
 * @param locale - The desired locale (e.g., "en", "de", "fr").
 * @returns An object with the localized name and description.
 */
export function getLocalizedFields(
  item: Record<string, any>,
  locale: string
): { name: string; description: string } {
  const name = item[`name_${locale}`] ?? item.name;
  const description = item[`description_${locale}`] ?? item.description;

  return { name, description };
}

/**
 * Converts a string into a URL-friendly slug.
 * @param text - The string to slugify.
 * @returns The slugified string.
 */
export function slugify(text: string): string {
  if (!text) return "";
  return text
    .toString()
    .toLowerCase()
    .replace(/\s+/g, "-") // Replace spaces with -
    .replace(/[^\w-]+/g, "") // Remove all non-word chars
    .replace(/--+/g, "-") // Replace multiple - with single -
    .replace(/^-+/, "") // Trim - from start of text
    .replace(/-+$/, ""); // Trim - from end of text
}

export function formatBackendErrors(error: any): string {
  if (typeof error?.message !== "string") {
    return "An unknown error occurred.";
  }

  try {
    // Attempt to parse the message as JSON
    const errors = JSON.parse(error.message);
    if (typeof errors !== "object" || errors === null) {
      return error.message;
    }

    // Format the JSON errors into a readable string
    return Object.entries(errors)
      .map(([field, messages]) => {
        const fieldName = field
          .replace(/_/g, " ")
          .replace(/\b\w/g, (l) => l.toUpperCase());
        if (Array.isArray(messages)) {
          return `${fieldName}: ${messages.join(", ")}`;
        }
        return `${fieldName}: ${String(messages)}`;
      })
      .join("\n");
  } catch (e) {
    // If parsing fails, return the original message
    return error.message;
  }
}

export function prepareDataForSubmission(
  data: Record<string, any>,
  fields: Record<string, { is_translation?: boolean; editable?: boolean }>
): Record<string, any> {
  const preparedData = { ...data };
  const autoGeneratedFields = ["id", "created_at", "updated_at", "post_count"];

  // Populate base fields from English translations (always overwrite to ensure sync with _en for backend requirements)
  const translationFields = Object.keys(preparedData).filter((key) =>
    key.endsWith("_en")
  );

  for (const transKey of translationFields) {
    const baseKey = transKey.slice(0, -3);
    if (preparedData[transKey] !== undefined) {
      // Only set if _en exists
      preparedData[baseKey] = preparedData[transKey];
    }
  }

  // Remove auto-generated or non-editable fields
  for (const key in preparedData) {
    if (
      autoGeneratedFields.includes(key) ||
      (fields[key] && fields[key].editable === false)
    ) {
      delete preparedData[key];
    }
  }

  return preparedData;
}

// New function for display/loading: syncs base from _en but keeps all fields
export function prepareDataForDisplay(
  data: Record<string, any>,
  fields: Record<string, { is_translation?: boolean }>
): Record<string, any> {
  const preparedData = { ...data };

  // Sync base fields from English translations (overwrite if _en exists)
  const translationFields = Object.keys(preparedData).filter((key) =>
    key.endsWith("_en")
  );

  for (const transKey of translationFields) {
    const baseKey = transKey.slice(0, -3);
    if (preparedData[transKey] !== undefined) {
      preparedData[baseKey] = preparedData[transKey];
    }
  }

  // Do NOT remove any fields for display purposes
  return preparedData;
}

export function processReceivedData<T extends Record<string, any>>(
  data: T | T[],
  fields: Record<string, { is_translation?: boolean }>
): T | T[] {
  if (Array.isArray(data)) {
    return data.map((item) => prepareDataForDisplay(item, fields) as T);
  }
  if (typeof data === "object" && data !== null) {
    return prepareDataForDisplay(data, fields) as T;
  }
  return data;
}

export function formatPrice(price: number, currency: string = "XAF"): string {
  return new Intl.NumberFormat("fr-CM", {
    style: "currency",
    currency: currency,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
}
